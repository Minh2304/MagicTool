"""
Script t·ª± ƒë·ªông build file EXE t·ª´ main.py
Ch·∫°y file n√†y ƒë·ªÉ build ch∆∞∆°ng tr√¨nh th√†nh file exe
"""
import os
import sys
import subprocess
import shutil

def check_pyinstaller():
    """Ki·ªÉm tra xem PyInstaller ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a"""
    try:
        import PyInstaller
        print("‚úì PyInstaller ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return True
    except ImportError:
        print("‚úó PyInstaller ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return False

def install_pyinstaller():
    """C√†i ƒë·∫∑t PyInstaller"""
    print("\nüì¶ ƒêang c√†i ƒë·∫∑t PyInstaller...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úì C√†i ƒë·∫∑t PyInstaller th√†nh c√¥ng")
        return True
    except subprocess.CalledProcessError:
        print("‚úó Kh√¥ng th·ªÉ c√†i ƒë·∫∑t PyInstaller")
        return False

def clean_build_folders():
    """X√≥a c√°c th∆∞ m·ª•c build v√† dist c≈©"""
    folders_to_remove = ['build', 'dist']
    spec_files = [f for f in os.listdir('.') if f.endswith('.spec')]
    
    print("\nüßπ D·ªçn d·∫πp c√°c file build c≈©...")
    
    for folder in folders_to_remove:
        if os.path.exists(folder):
            try:
                shutil.rmtree(folder)
                print(f"  ‚úì ƒê√£ x√≥a th∆∞ m·ª•c: {folder}")
            except Exception as e:
                print(f"  ‚ö† Kh√¥ng th·ªÉ x√≥a {folder}: {e}")
    
    for spec_file in spec_files:
        try:
            os.remove(spec_file)
            print(f"  ‚úì ƒê√£ x√≥a file: {spec_file}")
        except Exception as e:
            print(f"  ‚ö† Kh√¥ng th·ªÉ x√≥a {spec_file}: {e}")

def build_exe():
    """Build file exe b·∫±ng PyInstaller"""
    print("\nüî® ƒêang build file EXE...")
    print("=" * 60)
    
    # C√°c tham s·ªë cho PyInstaller
    # S·ª≠ d·ª•ng sys.executable ƒë·ªÉ ƒë·∫£m b·∫£o d√πng ƒë√∫ng Python
    pyinstaller_args = [
        sys.executable,                # Python executable
        '-m', 'PyInstaller',           # Ch·∫°y PyInstaller nh∆∞ m·ªôt module
        '--name=MagicTool',            # T√™n file exe
        '--onefile',                   # Build th√†nh 1 file duy nh·∫•t
        '--windowed',                  # Kh√¥ng hi·ªán console (GUI app)
        '--clean',                     # L√†m s·∫°ch cache tr∆∞·ªõc khi build
        '--noconfirm',                 # Kh√¥ng h·ªèi x√°c nh·∫≠n ghi ƒë√®
        # Th√™m file d·ªØ li·ªáu n·∫øu c√≥
        '--add-data=Book1.txt;.',      # Th√™m Book1.txt v√†o exe
        # ƒê·∫£m b·∫£o c√°c module ƒë∆∞·ª£c import
        '--hidden-import=PySide6.QtCore',
        '--hidden-import=PySide6.QtWidgets',
        '--hidden-import=PySide6.QtGui',
        '--hidden-import=openpyxl',
        '--hidden-import=pandas',
        '--hidden-import=numpy',
        '--hidden-import=back_end',
        '--hidden-import=drawing_tab',
        '--hidden-import=grid_canvas',
        '--hidden-import=sentence_manager',
        # Lo·∫°i b·ªè c√°c module kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng
        '--exclude-module=matplotlib',
        '--exclude-module=scipy',
        '--exclude-module=PIL',
        '--exclude-module=tkinter',
        'main.py'                      # File ch√≠nh
    ]
    
    try:
        # Hi·ªÉn th·ªã l·ªánh ƒëang ch·∫°y
        print(f"L·ªánh: python -m PyInstaller --name=MagicTool --onefile --windowed ...\n")
        
        # Ch·∫°y PyInstaller
        result = subprocess.run(
            pyinstaller_args,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        
        # Hi·ªÉn th·ªã output trong qu√° tr√¨nh build
        if result.stdout:
            # Ch·ªâ hi·ªÉn th·ªã c√°c d√≤ng quan tr·ªçng
            for line in result.stdout.split('\n'):
                if any(keyword in line.lower() for keyword in ['warning', 'error', 'info:', 'building', 'completed']):
                    print(line)
        
        if result.returncode == 0:
            print("=" * 60)
            print("\n‚úÖ BUILD TH√ÄNH C√îNG!")
            
            # Ki·ªÉm tra file exe c√≥ t·ªìn t·∫°i kh√¥ng
            exe_path = os.path.abspath('dist/MagicTool.exe')
            if os.path.exists(exe_path):
                file_size = os.path.getsize(exe_path) / (1024 * 1024)  # MB
                print(f"\nüìÅ File exe: {exe_path}")
                print(f"üìä Dung l∆∞·ª£ng: {file_size:.2f} MB")
                print("\nüéâ B·∫°n c√≥ th·ªÉ ch·∫°y file exe t·ª´ th∆∞ m·ª•c 'dist'")
            else:
                print(f"\n‚ö† Kh√¥ng t√¨m th·∫•y file exe t·∫°i: {exe_path}")
            
            return True
        else:
            print("=" * 60)
            print("\n‚ùå BUILD TH·∫§T B·∫†I!")
            print("\nL·ªói:")
            if result.stderr:
                print(result.stderr)
            return False
            
    except Exception as e:
        print(f"\n‚ùå L·ªói khi build: {e}")
        print(f"Lo·∫°i l·ªói: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """H√†m ch√≠nh"""
    print("=" * 60)
    print("üöÄ MAGIC TOOL - AUTO BUILD EXE")
    print("=" * 60)
    
    # Ki·ªÉm tra ƒëang ·ªü ƒë√∫ng th∆∞ m·ª•c
    if not os.path.exists('main.py'):
        print("\n‚ùå Kh√¥ng t√¨m th·∫•y file main.py!")
        print("Vui l√≤ng ch·∫°y script n√†y trong th∆∞ m·ª•c ch·ª©a main.py")
        input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Ki·ªÉm tra v√† c√†i ƒë·∫∑t PyInstaller n·∫øu c·∫ßn
    if not check_pyinstaller():
        response = input("\nB·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t PyInstaller kh√¥ng? (y/n): ")
        if response.lower() in ['y', 'yes', 'c√≥', '']:
            if not install_pyinstaller():
                print("\n‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c build m√† kh√¥ng c√≥ PyInstaller")
                input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
                return
        else:
            print("\n‚ùå C·∫ßn PyInstaller ƒë·ªÉ build exe")
            input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")
            return
    
    # H·ªèi c√≥ mu·ªën d·ªçn d·∫πp kh√¥ng
    response = input("\nB·∫°n c√≥ mu·ªën x√≥a c√°c file build c≈© kh√¥ng? (y/n): ")
    if response.lower() in ['y', 'yes', 'c√≥', '']:
        clean_build_folders()
    
    # Build exe
    print("\n‚è≥ Qu√° tr√¨nh build c√≥ th·ªÉ m·∫•t v√†i ph√∫t, vui l√≤ng ƒë·ª£i...")
    success = build_exe()
    
    if success:
        print("\n" + "=" * 60)
        print("‚ú® HO√ÄN TH√ÄNH!")
        print("=" * 60)
    else:
        print("\n" + "=" * 60)
        print("‚ö† Build kh√¥ng th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra l·ªói ·ªü tr√™n.")
        print("=" * 60)
    
    input("\nNh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main()
